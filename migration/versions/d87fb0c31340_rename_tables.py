"""rename tables

Revision ID: d87fb0c31340
Revises: 52c7b5bac496
Create Date: 2023-09-27 03:16:58.780888

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "d87fb0c31340"
down_revision = "52c7b5bac496"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "authors",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("middle_name", sa.String(), nullable=True),
        sa.Column("surname", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("field", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "articles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.UUID(), nullable=False),
        sa.Column("research_field", sa.String(), nullable=False),
        sa.Column("summary", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("content", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("author_article", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["author_article"], ["authors.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "comments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.UUID(), nullable=False),
        sa.Column("body", sa.Text(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("conclusion", sa.String(), nullable=True),
        sa.Column("author_comment", sa.Integer(), nullable=True),
        sa.Column("article_comment", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["article_comment"], ["articles.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["author_comment"], ["authors.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_comments_id"), "comments", ["id"], unique=False)
    op.drop_table("article")
    op.drop_table("author")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "author",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('author_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "middle_name", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "surname", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("field", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="author_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "article",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "research_field", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "summary", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("title", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "content", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "author_article", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["author_article"],
            ["author.id"],
            name="article_author_article_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="article_pkey"),
    )
    op.drop_index(op.f("ix_comments_id"), table_name="comments")
    op.drop_table("comments")
    op.drop_table("articles")
    op.drop_table("authors")
    # ### end Alembic commands ###
